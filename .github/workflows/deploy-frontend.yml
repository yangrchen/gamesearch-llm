name: Deploy Frontend

on:
    push:
        branches: [main]
        paths:
            - "frontend/**"
    pull_request:
        branches: [main]
        paths:
            - "frontend/**"
    workflow_dispatch:

env:
    AWS_REGION: us-east-1
    PUBLIC_API_URL: https://api.gamesearch.app
    MONGODB_DATABASE: gamesearch

jobs:
    validate:
        runs-on: ubuntu-latest

        permissions:
            contents: read

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 10.12.1

            - name: Setup node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "24.2.0"
                  cache: "pnpm"
                  cache-dependency-path: "frontend/pnpm-lock.yaml"

            - name: Install dependencies
              run: |
                  cd frontend
                  pnpm install
                  pnpm run build
              env:
                  PUBLIC_API_URL: https://api.gamesearch.app
    deploy:
        runs-on: ubuntu-latest
        needs: validate

        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'

        permissions:
            id-token: write
            contents: read

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_version: "1.12.1"
                  terraform_wrapper: false

            - name: Terraform init
              run: |
                  terraform init
              env:
                  TF_VAR_aws_region: ${{ env.AWS_REGION }}
                  TF_VAR_s3_data_bucket_name: ${{ secrets.S3_DATA_BUCKET }}
                  TF_VAR_igdb_client_id: ${{ secrets.IGDB_CLIENT_ID }}
                  TF_VAR_igdb_client_secret: ${{ secrets.IGDB_CLIENT_SECRET }}
                  TF_VAR_mongodbatlas_public_key: ${{ secrets.MONGODB_PUBLIC_KEY }}
                  TF_VAR_mongodbatlas_private_key: ${{ secrets.MONGODB_PRIVATE_KEY }}
                  TF_VAR_mongodbatlas_org_id: ${{ secrets.MONGODB_ORG_ID }}
                  TF_VAR_mongodbatlas_database: ${{ env.MONGODB_DATABASE }}
                  TF_VAR_mongodbatlas_connection_uri_base: ${{ secrets.MONGODB_CONNECTION_URI }}
                  TF_VAR_mongodbatlas_dbuser_user: ${{ secrets.MONGODB_USER }}
                  TF_VAR_mongodbatlas_dbuser_password: ${{ secrets.MONGODB_PASSWORD }}
                  TF_VAR_voyage_api_key: ${{ secrets.VOYAGE_API_KEY }}
                  TF_VAR_anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
                  TF_VAR_gamesearch_secret_key: ${{ secrets.GAMESEARCH_SECRET_KEY }}

            - name: Get Terraform outputs
              id: terraform
              run: |
                  # Get the S3 bucket name
                  S3_FRONTEND_BUCKET=$(terraform output -raw s3_frontend_bucket_name)
                  echo "s3_frontend_bucket=$S3_FRONTEND_BUCKET" >> $GITHUB_OUTPUT

                  # Get the CloudFront distribution ID
                  CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)
                  echo "cloudfront_id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
              env:
                  TF_VAR_aws_region: ${{ env.AWS_REGION }}
                  TF_VAR_s3_data_bucket_name: ${{ secrets.S3_DATA_BUCKET }}
                  TF_VAR_igdb_client_id: ${{ secrets.IGDB_CLIENT_ID }}
                  TF_VAR_igdb_client_secret: ${{ secrets.IGDB_CLIENT_SECRET }}
                  TF_VAR_mongodbatlas_public_key: ${{ secrets.mongodbatlas_public_key }}
                  TF_VAR_mongodbatlas_private_key: ${{ secrets.mongodbatlas_private_key }}
                  TF_VAR_mongodbatlas_org_id: ${{ secrets.MONGODB_ORG_ID }}
                  TF_VAR_mongodbatlas_database: ${{ env.MONGODB_DATABASE }}
                  TF_VAR_mongodbatlas_connection_uri_base: ${{ secrets.MONGODB_CONNECTION_URI }}
                  TF_VAR_mongodbatlas_dbuser_user: ${{ secrets.MONGODB_USER }}
                  TF_VAR_mongodbatlas_dbuser_password: ${{ secrets.MONGODB_PASSWORD }}
                  TF_VAR_voyage_api_key: ${{ secrets.VOYAGE_API_KEY }}
                  TF_VAR_anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
                  TF_VAR_gamesearch_secret_key: ${{ secrets.GAMESEARCH_SECRET_KEY }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 8

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "pnpm"
                  cache-dependency-path: "frontend/pnpm-lock.yaml"

            - name: Install dependencies
              run: |
                  cd frontend
                  pnpm install

            - name: Build frontend
              run: |
                  cd frontend
                  pnpm run build
              env:
                  PUBLIC_API_URL: ${{ env.PUBLIC_API_URL }}

            - name: Sync to S3
              run: |
                  aws s3 sync frontend/build/ s3://${{ steps.terraform.outputs.s3_frontend_bucket }}/ \
                  --delete \
                  --cache-control "public, max-age=31536000" \
                  --exclude "*.html" \
                  --exclude "*.json"

                  # Upload HTML files with no-cache
                  aws s3 sync frontend/build/ s3://${{ steps.terraform.outputs.s3_frontend_bucket }}/ \
                  --delete \
                  --cache-control "public, max-age=0, must-revalidate" \
                  --include "*.html"
                  --include "*.json"

            - name: Invalidate CloudFront cache
              run: |
                  aws cloudfront create-invalidation \
                  --distribution-id ${{ steps.terraform.outputs.cloudfront_id }} \
                  --paths "/*"
